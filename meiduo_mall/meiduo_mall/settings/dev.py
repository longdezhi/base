"""
开发阶段使用的配置文件
"""

"""
Django settings for meiduo_mall project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os,sys,datetime

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# os.path.abspath(__file__)：
#       /Users/weiwei/Desktop/meiduo_mall_sz39/meiduo_mall/meiduo_mall/settings/dev.py
# os.path.dirname(os.path.abspath(__file__))：
#       /Users/weiwei/Desktop/meiduo_mall_sz39/meiduo_mall/meiduo_mall/settings/
# os.path.dirname(os.path.dirname(os.path.abspath(__file__)))：
#       /Users/weiwei/Desktop/meiduo_mall_sz39/meiduo_mall/meiduo_mall/
# BASE_DIR是工程内层目录
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# sys.path是一个列表，该列表里面的所有的路径都是导包查找路径
# 我只需要把apps文件夹的路径加入这个列表中，就可以直接导入apps里面的应用
sys.path.insert(
    0,
    os.path.join(
        os.path.dirname(BASE_DIR), 'apps'
    )
)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '86j_0^*mri+88x)w*wdoiv=%7sd+c4g66f#zm7t1uen^mb!h8y'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# django白名单，只有在这个列表里面的域名才能访问django
# ALLOWED_HOSTS = ["www.meiduo.site"]
ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',


    # 注册第三方应用
    'corsheaders', # 解决了跨域请求问题
    'django_crontab', # 定时任务
    # 'haystack', # 用于和es服务器交互的一个中间件

    # 注册users应用
    # 'apps.users.apps.UserConfig' # import apps.users
    'apps.users',
    'apps.verifications',
    'apps.oauth',
    'apps.areas',
    'apps.contents',
    'apps.goods',
    'apps.carts',
    'apps.orders',
    'apps.payment',
    'apps.meiduo_admin'
]

MIDDLEWARE = [
    # 添加一个中间件来响应跨域询问OPTIONS请求
    'corsheaders.middleware.CorsMiddleware',
    
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 添加跨域白名单，指定允许跨域请求到8000的源
CORS_ORIGIN_WHITELIST = [
    # 美多商城跨域请求源
    'http://www.meiduo.site:8080',
    'http://127.0.0.1:8080',

    # 管理站点跨域请求的源
    'http://www.meiduo.site:8081'
]
# 表示跨域的多个主机之间共享cookie数据
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'meiduo_mall.urls'

# django的模版配置
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 指定django的模版目录
        # BASE_DIR =  "/Users/weiwei/Desktop/meiduo_mall_sz39/meiduo_mall/meiduo_mall/"
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'meiduo_mall.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': { # 指定主服务器
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'meiduo_mall',
        'USER': 'itcast',
        'PASSWORD': '123456',
        'HOST': '192.168.203.153',
        'PORT': 3306
    },
    # 'slave': { # 指定从服务器
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': 'meiduo_mall_db',
    #     'USER': 'root',
    #     'PASSWORD': '123456',
    #     'HOST': '192.168.203.153',
    #     'PORT': 8306
    # }
}

# 指定Django采用的用户模型类
AUTH_USER_MODEL = 'users.User' # '<用户模型类所在的应用.用户模型类名>'

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# 设置django采用的时区
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

# 启动Django时区功能：1、所有存储到mysql中的时间，统一按照零时区存储；2、在按照时间过滤的时候，统一把时间转化成0时区进行比较；
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'


# 配置工程缓存，我们采用redis作为缓存库
CACHES = {
    # 默认存储信息: 存到 0 号库
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.203.153:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # session 信息: 存到 1 号库
    "session": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.203.153:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 验证码信息: 存到 2 号库
    "verify_code": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.203.153:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "history": { # 用户浏览记录
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.203.153:6379/3",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "carts": { # 缓存购物车数据
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.203.153:6379/4",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
}

# session引擎
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
# 指定session使用的缓存配置
SESSION_CACHE_ALIAS = "session"


# 定义日志
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
    'formatters': {  # 日志信息显示的格式
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {  # 对日志进行过滤
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 日志处理方法
        'console': {  # 向终端中输出日志
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {  # 向文件中输出日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/meiduo.log'),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    'loggers': {  # 日志器
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],  # 可以同时向终端与文件中输出日志
            'propagate': True,  # 是否继续传递日志信息
            'level': 'INFO',  # 日志器接收的最低日志级别
        },
    }
}




# 指定自定义的用户认证后端:
AUTHENTICATION_BACKENDS = [
    'apps.users.utils.UsernameMobileAuthBackend'
    # Session认证
    # JWT认证
]




# QQ登录参数
# 我们申请的 客户端id
QQ_CLIENT_ID = '101474184'
# 我们申请的 客户端秘钥
QQ_CLIENT_SECRET = 'c6ce949e04e12ecc909ae6a8b09b637c'
# 我们申请时添加的: 登录成功后回调的路径
QQ_REDIRECT_URI = 'http://www.meiduo.site:8080/oauth_callback.html'



# 发送短信的相关设置, 这些设置是当用户没有发送相关字段时, 默认使用的内容:
# 发送短信必须进行的设置:
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# 我们使用的 smtp服务器 地址
EMAIL_HOST = 'smtp.163.com'
# 端口号
EMAIL_PORT = 25
# 下面的内容是可变的, 随后台设置的不同而改变:
# 发送邮件的邮箱
EMAIL_HOST_USER = 'ldz908806691@163.com'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'DZCDISXQEFZYEUXP'
# 收件人看到的发件人
EMAIL_FROM = '美多商城<itcast_weiwei@163.com>'

# 邮箱验证链接
EMAIL_VERIFY_URL = 'http://www.meiduo.site:8080/success_verify_email.html?token='


# 指定自定义的Django文件存储类
DEFAULT_FILE_STORAGE = 'meiduo_mall.utils.fastdfs.FastDFSStorage'
# 定义fdfs服务url前缀
FDFS_BASE_URL = 'http://image.meiduo.site:8888/'


# 该配置项记录了front_end_pc文件夹的路径
# BASE_DIR是内层目录：/Users/weiwei/Desktop/meiduo_mall_sz39/meiduo_mall/meiduo_mall
# front_end_pc目录：/Users/weiwei/Desktop/meiduo_mall_sz39/front_end_pc
STATIC_FILE_PATH = os.path.join(
    os.path.dirname(os.path.dirname(BASE_DIR)),
    'front_end_pc'
)

# 指定定时任务规则
CRONJOBS = [
    # 每1分钟生成一次首页静态文件
    ('*/1 * * * *', 'apps.contents.crons.generate_static_index_html', '>> ' + os.path.join(BASE_DIR, 'logs/crontab.log'))
    # 每月的23日12点1分0秒执行一次
    # ('1 12 23 * *', 'apps.contents.crons.generate_static_index_html', '>> ' + os.path.join(BASE_DIR, 'logs/crontab.log'))
]

# 如果定时任务执行报编码错误，加入以下2项配置
# ubuntu
# CRONTAB_COMMAND_PREFIX = 'LANG_ALL=zh_cn.UTF-8'
# mac
# CRONTAB_COMMAND_PREFIX = 'LANG=zh_cn.UTF-8'


# Haystack配置项
# HAYSTACK_CONNECTIONS = {
#     # 默认的es服务器链接
#     'default': {
#         'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
#         'URL': 'http://192.168.203.153:9200/', # Elasticsearch服务器ip地址，端口号固定为9200
#         'INDEX_NAME': 'meiduo_mall', # Elasticsearch建立的索引库的名称
#     },
# }

# 当被检索的数据被修改了，haystack就会把新的数据写入es索引库
# HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
# 可以在 dev.py 中添加如下代码, 用于决定每页显示数据条数:
# HAYSTACK_SEARCH_RESULTS_PER_PAGE = 5


# 支付宝参数
ALIPAY_APPID = '2016091600526851' # 应用ID
ALIPAY_DEBUG = True # 调试模式，对接沙箱应用时为True,对接正式应用时为False
ALIPAY_URL = 'https://openapi.alipaydev.com/gateway.do' # 对接支付宝的网关，如果对接沙箱应用就是测试网关

# 用户支付成功过之后，转而请求到美多的地址
ALIPAY_RETURN_URL = "http://www.meiduo.site:8080/pay_success.html" # 支付成功后的回调地址


# 指定django数据库读写路由
# DATABASE_ROUTERS = [
#     'meiduo_mall.utils.db_router.MasterSlaveDBRouter'
# ]


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 验证用户的令牌(token)来确定用户身份
        # 思考：
        # 1、前端如何传递token值;
        # 答： 头部携带；Authorization: JWT gregtrw.trhyt4hy.4hy46h6
        #      JSONWebTokenAuthentication后端会根据既定的格式提取并校验token有效性，进而获取用户身份
        #      把验证成功的用户对象赋值给了request.user
        # 2、如何校验； —— 重复加密，比对新旧签名；
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',

        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}

# 配置jwt拓展
JWT_AUTH = {
    # 设置签发的token的有效期
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=100),
    # 来指定拓展插件默认视图返回的响应参数构造函数
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'meiduo_mall.utils.jwt_response_handlers.jwt_response_payload_handler'
}


# 在配置文件中初始化一个日志器对象
import logging
logger = logging.getLogger('django')